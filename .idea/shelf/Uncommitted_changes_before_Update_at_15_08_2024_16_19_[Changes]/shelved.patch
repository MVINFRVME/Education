Index: lessons/Modules/module13/Задача 1. Квадраты чисел.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Задача 1. Квадраты чисел\r\n# Что нужно сделать\r\n# Пользователь вводит число N. Напишите программу, которая генерирует последовательность из квадратов чисел от 1\r\n# до N (1 ** 2, 2 ** 2, 3 ** 2 и так далее). Реализацию напишите тремя способами: класс-итератор, функция-генератор и\r\n# генераторное выражение.\r\n#\r\n# Что оценивается\r\n# Результат вычислений корректен.\r\n# Input содержит корректные приглашения для ввода.\r\n# Модели реализованы в стиле ООП, основной функционал описан в методах классов и в отдельных функциях.\r\n# При написании классов соблюдаются основные принципы ООП: инкапсуляция, наследование и полиморфизм.\r\n# Для получения и установки значений у приватных атрибутов используются сеттеры и геттеры.\r\n# Для создания нового класса на основе уже существующего используется наследование.\r\n# Сообщения о процессе получения результата осмыслены и понятны для пользователя.\r\n# Переменные, функции и собственные методы классов имеют значащие имена (не a, b, c, d).\r\n# Классы и методы/функции имеют прописанную документацию.\r\n# Есть аннотация типов для методов/функций и их аргументов (кроме args и kwargs). Если функция/метод ничего не\r\n# возвращает, то используется None.\r\n\r\n\r\nfrom collections.abc import Iterable\r\n\r\n\r\nclass SquareIterator:\r\n    \"\"\"Класс SquareIterator генерирует последовательность из квадратов чисел от 1 до limit\r\n\r\n    Args:\r\n        limit (int): передается число до которого(включительно) будет генерироваться последовательность квадратов\r\n\r\n    Attributes:\r\n        __limit (int): предел, до которого генерируются квадраты\r\n        __count (int): счетчик итераций\r\n        \"\"\"\r\n\r\n    def __init__(self, limit: int) -> None:\r\n        self.__count = 0\r\n        self.__limit = limit\r\n\r\n    def __iter__(self):\r\n        \"\"\"Метод  __iter__ возвращает итератор для данного объекта.\r\n\r\n        :return: возвращает сам объект итератора\"\"\"\r\n        return self\r\n\r\n    def __next__(self):\r\n        \"\"\"Метод __next__ создает следующее значение числа в квадрате\r\n\r\n         :return self.__count ** 2: возвращает квадрат числа\r\n         :rtype: int\r\n\r\n         :raises StopIteration: если текущее число превышает указанный предел\r\n         \"\"\"\r\n        return self\r\n\r\n    def __next__(self):\r\n        while self.__count < self.__limit:\r\n            self.__count += 1\r\n            return self.__count ** 2\r\n        else:\r\n            raise StopIteration\r\n\r\n\r\nmy_iter = SquareIterator(10)\r\nfor num in my_iter:\r\n    print(num, end=' ')\r\nprint()\r\n# --------------------------------------------------------------------------------\r\n\r\n\r\ndef square_generator(limit: int) -> Iterable[int]:\r\n    for i in range(1, limit + 1):\r\n        yield i ** 2\r\n\r\n\r\nfor num in square_generator(10):\r\n    print(num, end=' ')\r\nprint()\r\n\r\n# --------------------------------------------------------------------------------\r\n\r\nsquares = (num ** 2 for num in range(1, 11))\r\nfor num in square_generator(10):\r\n    print(num, end=' ')\r\nprint()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lessons/Modules/module13/Задача 1. Квадраты чисел.py b/lessons/Modules/module13/Задача 1. Квадраты чисел.py
--- a/lessons/Modules/module13/Задача 1. Квадраты чисел.py	(revision 79cf34fcda4160bcc3adab1fec1714457bf1d1e3)
+++ b/lessons/Modules/module13/Задача 1. Квадраты чисел.py	(date 1723720760217)
@@ -50,9 +50,6 @@
 
          :raises StopIteration: если текущее число превышает указанный предел
          """
-        return self
-
-    def __next__(self):
         while self.__count < self.__limit:
             self.__count += 1
             return self.__count ** 2
