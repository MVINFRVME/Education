# Задача 3. Палиндром: возвращение
# Что нужно сделать
# Есть множество встроенных и внешних библиотек для работы с данными в Python. С некоторыми из них вы уже работали.
# Например, с модулем collections, когда использовали специальный класс OrderedDict, с помощью которого делали
# упорядоченный словарь. В этой библиотеке есть и другие возможности, но их немного. Официальная документация:
# collections — Container datatypes.
#
# Используя модуль collections, реализуйте функцию can_be_poly, которая принимает на вход строку и проверяет,
# можно ли получить из неё палиндром.
#
# Пример кода:
#
# print(can_be_poly('abcba'))
# print(can_be_poly('abbbc'))
# Результат:
# True
# False
#
# Что оценивается
# Результат вычислений корректен.
# Формат вывода соответствует примеру.
# Переменные, функции и собственные методы классов имеют значащие имена (не a, b, c, d).
# Решение опирается на использование лямбда-функций.
# Классы и методы/функции имеют прописанную документацию, хотя бы минимальную.
# Есть аннотация типов для методов/функций и их аргументов, кроме args и kwargs. Если функция/метод ничего не возвращает, то используется None.

from collections import Counter


def can_be_poly(string: str) -> bool:
    """Функция, которая определяет, является ли строка палиндромом, посредством подсчета
    кол-ва четных и нечетных символов."""
    return len(list(filter(lambda x: x % 2, Counter(string).values()))) <= 1

print(can_be_poly('abcba'))
print(can_be_poly('abbbc'))
